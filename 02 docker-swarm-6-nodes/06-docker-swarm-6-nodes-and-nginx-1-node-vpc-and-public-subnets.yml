
Description:  This template deploys a VPC, with a pair of public spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets.


Mappings:

  KeyPair:
    Key01:
      key: key-pair-teste

  Vpc:
    Vpc01:
      VpcId: vpc-3e879444

  Sg:
    Sg01:
      SgId: sg-03a75a7d741b59e23

  AmiMap:
    ServerType01:
      id: ami-02354e95b39ca8dec

  UserData:
    Script01:
      ScriptList:
        - |
          #!/bin/bash -ex
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 
          yum -y update
          yum install -y nc telnet git
          amazon-linux-extras install -y docker
          service docker start
          systemctl enable docker
          usermod -a -G docker ec2-user
          COMPOSE_VERSION="$(git ls-remote https://github.com/docker/compose | grep refs/tags | grep -oE '[0-9]+\.[0-9][0-9]+\.[0-9]+$' | sort --version-sort | tail -n 1)"
          curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          mkdir -p /etc/docker
          cat  <<EOF > /etc/docker/daemon.json
          {"hosts": ["tcp://0.0.0.0:2375", "unix:///var/run/docker.sock"]}
          EOF
          mkdir -p /etc/systemd/system/docker.service.d
          cat  <<EOF > /etc/systemd/system/docker.service.d/override.conf
          [Service]
          ExecStart=
          ExecStart=/usr/bin/dockerd
          EOF
          systemctl daemon-reload
          service docker restart
          systemctl daemon-reload

  UserDataNginx:
    Script01:
      ScriptList:
      - "#!/bin/bash -xe \n"
      - "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n"
      - "yum update -y \n"
      - "amazon-linux-extras install -y epel \n"
      - "yum install -y nginx \n"
      - "service nginx start \n"
      - "systemctl enable nginx \n"
      - "yum install -y keepalived \n"
      - "systemctl enable keepalived \n"
      - "yum install -y git \n"


Parameters:

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  KeyNameParam:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: key-pair-teste
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.12.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the 3rd Availability Zone
    Type: String
    Default: 10.192.13.0/24

  PublicSubnet4CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the 4th Availability Zone
    Type: String
    Default: 10.192.14.0/24

  PublicSubnet5CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the 5th Availability Zone
    Type: String
    Default: 10.192.15.0/24

  PublicSubnet6CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the 6th Availability Zone
    Type: String
    Default: 10.192.16.0/24

  IpNginxHostSubnet1:
    Description: Please enter the IP for the NGINX host subnet in the 1st Availability Zone
    Type: String
    Default: 10.192.11.70

  IpHostSubnet1:
    Description: Please enter the IP for the DOCKER host subnet in the 1st Availability Zone
    Type: String
    Default: 10.192.11.50

  IpHostSubnet2:
    Description: Please enter the IP for the DOCKER host subnet in the 2nd Availability Zone
    Type: String
    Default: 10.192.12.50

  IpHostSubnet3:
    Description: Please enter the IP for the DOCKER host subnet in the 3rd Availability Zone
    Type: String
    Default: 10.192.13.50

  IpHostSubnet4:
    Description: Please enter the IP for the DOCKER host subnet in the 4th Availability Zone
    Type: String
    Default: 10.192.14.50

  IpHostSubnet5:
    Description: Please enter the IP for the DOCKER host subnet in the 5th Availability Zone
    Type: String
    Default: 10.192.15.50

  IpHostSubnet6:
    Description: Please enter the IP for the DOCKER host subnet in the 6th Availability Zone
    Type: String
    Default: 10.192.16.50

  InstanceTypeParam:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Ref: EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Ref: EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: 
        Ref: InternetGateway
      VpcId: 
        Ref: VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName} Public Subnet (AZ3)

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 3
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet4CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName} Public Subnet (AZ4)

  PublicSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 4
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet5CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName} Public Subnet (AZ5)

  PublicSubnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 5
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet6CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName} Public Subnet (AZ6)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet3

  PublicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet4

  PublicSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet5

  PublicSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet6

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId:
        Ref: VPC

  AllTrafficSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AllTrafficSg01
      GroupDescription: SG libera todo trafego
      SecurityGroupIngress:
      - Description: All traffic inbound ip4 allowed
        IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
        FromPort: '0'
        ToPort: '65535'
      - Description: All traffic inbound ip6 allowed
        IpProtocol: "-1"
        CidrIpv6: "::/0"
        FromPort: '0'
        ToPort: '65535'
      VpcId:
        Ref: VPC

  TemplateDockerAwsLinux2AllTrafic:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId:
          Fn::FindInMap:
          - AmiMap
          - ServerType01
          - id
        InstanceType:
          Ref: InstanceTypeParam
        KeyName:
          Ref: KeyNameParam
        SecurityGroupIds:
        - Ref: AllTrafficSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Join:
            - ''
            - Fn::FindInMap:
              - UserData
              - Script01
              - ScriptList
      LaunchTemplateName: templ-docker-aws-linux2-all-trafic

  Docker01Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: docker01
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      NetworkInterfaces:
      - Description: Primary Network Interface
        DeviceIndex: '0'
        SubnetId:
          Ref: PublicSubnet1
        PrivateIpAddress:
          Ref: IpHostSubnet1
        GroupSet:
        - Ref: AllTrafficSecurityGroup
      ImageId:
        Fn::FindInMap:
        - AmiMap
        - ServerType01
        - id
      InstanceType:
        Ref: InstanceTypeParam
      KeyName:
        Ref: KeyNameParam
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - Fn::Join:
              - ''
              - Fn::FindInMap:
                - UserData
                - Script01
                - ScriptList
            - !Sub |
                docker swarm init --advertise-addr eth0

  Docker02Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: docker02
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      NetworkInterfaces:
      - Description: Primary Network Interface
        DeviceIndex: '0'
        SubnetId:
          Ref: PublicSubnet2
        PrivateIpAddress:
          Ref: IpHostSubnet2
        GroupSet:
        - Ref: AllTrafficSecurityGroup
      ImageId:
        Fn::FindInMap:
        - AmiMap
        - ServerType01
        - id
      InstanceType:
        Ref: InstanceTypeParam
      KeyName:
        Ref: KeyNameParam
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - Fn::Join:
              - ''
              - Fn::FindInMap:
                - UserData
                - Script01
                - ScriptList
            - !Sub |
                while ! (nc -z ${IpHostSubnet1} 2377) ; do echo 'Aguardando swarm manager...' ; sleep 10 ; done
                docker swarm join --token $(docker -H ${IpHostSubnet1} swarm join-token manager -q) ${IpHostSubnet1}:2377

  Docker03Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: docker03
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ''
      NetworkInterfaces:
      - Description: Primary Network Interface
        DeviceIndex: '0'
        SubnetId:
          Ref: PublicSubnet3
        PrivateIpAddress:
          Ref: IpHostSubnet3
        GroupSet:
        - Ref: AllTrafficSecurityGroup
      ImageId:
        Fn::FindInMap:
        - AmiMap
        - ServerType01
        - id
      InstanceType:
        Ref: InstanceTypeParam
      KeyName:
        Ref: KeyNameParam
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - Fn::Join:
              - ''
              - Fn::FindInMap:
                - UserData
                - Script01
                - ScriptList
            - !Sub |
                while ! (nc -z ${IpHostSubnet1} 2377) ; do echo 'Aguardando swarm manager...' ; sleep 10 ; done
                docker swarm join --token $(docker -H ${IpHostSubnet1} swarm join-token manager -q) ${IpHostSubnet1}:2377

  Docker04Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: docker04
      AvailabilityZone:
        Fn::Select:
        - 3
        - Fn::GetAZs: ''
      NetworkInterfaces:
      - Description: Primary Network Interface
        DeviceIndex: '0'
        SubnetId:
          Ref: PublicSubnet4
        PrivateIpAddress:
          Ref: IpHostSubnet4
        GroupSet:
        - Ref: AllTrafficSecurityGroup
      ImageId:
        Fn::FindInMap:
        - AmiMap
        - ServerType01
        - id
      InstanceType:
        Ref: InstanceTypeParam
      KeyName:
        Ref: KeyNameParam
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - Fn::Join:
              - ''
              - Fn::FindInMap:
                - UserData
                - Script01
                - ScriptList
            - !Sub |
                while ! (nc -z ${IpHostSubnet1} 2377) ; do echo 'Aguardando swarm manager...' ; sleep 10 ; done
                docker swarm join --token $(docker -H ${IpHostSubnet1} swarm join-token manager -q) ${IpHostSubnet1}:2377

  Docker05Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: docker05
      AvailabilityZone:
        Fn::Select:
        - 4
        - Fn::GetAZs: ''
      NetworkInterfaces:
      - Description: Primary Network Interface
        DeviceIndex: '0'
        SubnetId:
          Ref: PublicSubnet5
        PrivateIpAddress:
          Ref: IpHostSubnet5
        GroupSet:
        - Ref: AllTrafficSecurityGroup
      ImageId:
        Fn::FindInMap:
        - AmiMap
        - ServerType01
        - id
      InstanceType:
        Ref: InstanceTypeParam
      KeyName:
        Ref: KeyNameParam
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - Fn::Join:
              - ''
              - Fn::FindInMap:
                - UserData
                - Script01
                - ScriptList
            - !Sub |
                while ! (nc -z ${IpHostSubnet1} 2377) ; do echo 'Aguardando swarm manager...' ; sleep 10 ; done
                docker swarm join --token $(docker -H ${IpHostSubnet1} swarm join-token manager -q) ${IpHostSubnet1}:2377

  Docker06Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: docker06
      AvailabilityZone:
        Fn::Select:
        - 5
        - Fn::GetAZs: ''
      NetworkInterfaces:
      - Description: Primary Network Interface
        DeviceIndex: '0'
        SubnetId:
          Ref: PublicSubnet6
        PrivateIpAddress:
          Ref: IpHostSubnet6
        GroupSet:
        - Ref: AllTrafficSecurityGroup
      ImageId:
        Fn::FindInMap:
        - AmiMap
        - ServerType01
        - id
      InstanceType:
        Ref: InstanceTypeParam
      KeyName:
        Ref: KeyNameParam
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - Fn::Join:
              - ''
              - Fn::FindInMap:
                - UserData
                - Script01
                - ScriptList
            - !Sub |
                while ! (nc -z ${IpHostSubnet1} 2377) ; do echo 'Aguardando swarm manager...' ; sleep 10 ; done
                docker swarm join --token $(docker -H ${IpHostSubnet1} swarm join-token worker -q) ${IpHostSubnet1}:2377

  Nginx01Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: nginx01
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      NetworkInterfaces:
      - Description: Primary Network Interface
        DeviceIndex: '0'
        SubnetId:
          Ref: PublicSubnet1
        PrivateIpAddress:
          Ref: IpNginxHostSubnet1
        GroupSet:
        - Ref: AllTrafficSecurityGroup
        AssociatePublicIpAddress: true
        DeleteOnTermination: true
      ImageId:
        Fn::FindInMap:
        - AmiMap
        - ServerType01
        - id
      InstanceType:
        Ref: InstanceTypeParam
      KeyName:
        Ref: KeyNameParam
      SourceDestCheck: False
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - Fn::Join:
              - ''
              - Fn::FindInMap:
                - UserDataNginx
                - Script01
                - ScriptList
            - !Sub |
                cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.original



Outputs:

  VPC:
    Description: A reference to the created VPC
    Value:
      Ref: VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value:
      Fn::Join:
      - ","
      - - Ref: PublicSubnet1
        - Ref: PublicSubnet2
        - Ref: PublicSubnet3
        - Ref: PublicSubnet4
        - Ref: PublicSubnet5
        - Ref: PublicSubnet6

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value:
      Ref: PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value:
      Ref: PublicSubnet2

  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value:
      Ref: PublicSubnet3

  PublicSubnet4:
    Description: A reference to the public subnet in the 4th Availability Zone
    Value:
      Ref: PublicSubnet4

  PublicSubnet5:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value:
      Ref: PublicSubnet5

  PublicSubnet6:
    Description: A reference to the public subnet in the 4th Availability Zone
    Value:
      Ref: PublicSubnet6

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value:
      Ref: NoIngressSecurityGroup

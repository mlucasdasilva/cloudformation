{
  "Description": "This template deploys a VPC, with a pair of public spread across two Availability Zones. It deploys an internet gateway, with a default route on the public subnets.",
  "Mappings": {
    "KeyPair": {
      "Key01": {
        "key": "key-pair-teste"
      }
    },
    "Vpc": {
      "Vpc01": {
        "VpcId": "vpc-3e879444"
      }
    },
    "Sg": {
      "Sg01": {
        "SgId": "sg-03a75a7d741b59e23"
      }
    },
    "AmiMap": {
      "ServerType01": {
        "id": "ami-02354e95b39ca8dec"
      }
    },
    "UserData": {
      "Script01": {
        "ScriptList": [
          "#!/bin/bash -xe\n",
          "yum update -y \n",
          "amazon-linux-extras install -y docker \n",
          "service docker start \n",
          "systemctl enable docker \n",
          "usermod -a -G docker ec2-user \n",
          "curl -L ",
          "\"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\"",
          " -o /usr/local/bin/docker-compose \n",
          "chmod +x /usr/local/bin/docker-compose \n"
        ]
      }
    }
  },
  "Parameters": {
    "EnvironmentName": {
      "Description": "An environment name that is prefixed to resource names",
      "Type": "String"
    },
    "KeyNameParam": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "key-pair-teste",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "VpcCIDR": {
      "Description": "Please enter the IP range (CIDR notation) for this VPC",
      "Type": "String",
      "Default": "10.192.0.0/16"
    },
    "PublicSubnet1CIDR": {
      "Description": "Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone",
      "Type": "String",
      "Default": "10.192.11.0/24"
    },
    "PublicSubnet2CIDR": {
      "Description": "Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone",
      "Type": "String",
      "Default": "10.192.12.0/24"
    },
    "PublicSubnet3CIDR": {
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the 3rd Availability Zone",
      "Type": "String",
      "Default": "10.192.13.0/24"
    },
    "PublicSubnet4CIDR": {
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the 4th Availability Zone",
      "Type": "String",
      "Default": "10.192.14.0/24"
    },
    "PublicSubnet5CIDR": {
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the 5th Availability Zone",
      "Type": "String",
      "Default": "10.192.15.0/24"
    },
    "PublicSubnet6CIDR": {
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the 6th Availability Zone",
      "Type": "String",
      "Default": "10.192.16.0/24"
    },
    "IpHostSubnet1": {
      "Description": "Please enter the IP for the hoste subnet in the 1st Availability Zone",
      "Type": "String",
      "Default": "10.192.11.50"
    },
    "IpHostSubnet2": {
      "Description": "Please enter the IP for the hoste subnet in the 2nd Availability Zone",
      "Type": "String",
      "Default": "10.192.12.50"
    },
    "IpHostSubnet3": {
      "Description": "Please enter the IP for the hoste subnet in the 3rd Availability Zone",
      "Type": "String",
      "Default": "10.192.13.50"
    },
    "IpHostSubnet4": {
      "Description": "Please enter the IP for the hoste subnet in the 4th Availability Zone",
      "Type": "String",
      "Default": "10.192.14.50"
    },
    "IpHostSubnet5": {
      "Description": "Please enter the IP for the hoste subnet in the 5th Availability Zone",
      "Type": "String",
      "Default": "10.192.15.50"
    },
    "IpHostSubnet6": {
      "Description": "Please enter the IP for the hoste subnet in the 6th Availability Zone",
      "Type": "String",
      "Default": "10.192.16.50"
    },
    "InstanceTypeParam": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
        "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "VpcCIDR",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
      "Properties": { "Tags": [ { "Key": "Name", "Value": "EnvironmentName" } ] }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": { "Tags": [ { "Key": "Name", "Value": "EnvironmentName" } ] }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": "InternetGateway",
        "VpcId": "VPC"
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": "VPC",
        "AvailabilityZone": [ 0, null ],
        "CidrBlock": "PublicSubnet1CIDR",
        "MapPublicIpOnLaunch": true,
        "Tags": [ { "Key": "Name", "Value": "${EnvironmentName} Public Subnet (AZ1)" } ] }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": "VPC",
        "AvailabilityZone": [ 1, null ],
        "CidrBlock": "PublicSubnet2CIDR",
        "MapPublicIpOnLaunch": true,
        "Tags": [ { "Key": "Name", "Value": "${EnvironmentName} Public Subnet (AZ2)" } ] }
    },
    "PublicSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": "VPC",
        "AvailabilityZone": [ 2, null ],
        "CidrBlock": "PublicSubnet3CIDR",
        "MapPublicIpOnLaunch": true,
        "Tags": [ { "Key": "Name", "Value": "${EnvironmentName} Public Subnet (AZ3)" } ] }
    },
    "PublicSubnet4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": "VPC",
        "AvailabilityZone": [
          3,
          null
        ],
        "CidrBlock": "PublicSubnet4CIDR",
        "MapPublicIpOnLaunch": true,
        "Tags": [ { "Key": "Name", "Value": "${EnvironmentName} Public Subnet (AZ4)" } ] }
    },
    "PublicSubnet5": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": "VPC",
        "AvailabilityZone": [
          4,
          null
        ],
        "CidrBlock": "PublicSubnet5CIDR",
        "MapPublicIpOnLaunch": true,
        "Tags": [ { "Key": "Name", "Value": "${EnvironmentName} Public Subnet (AZ5)" } ] }
    },
    "PublicSubnet6": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": "VPC",
        "AvailabilityZone": [
          5,
          null
        ],
        "CidrBlock": "PublicSubnet6CIDR",
        "MapPublicIpOnLaunch": true,
        "Tags": [ { "Key": "Name", "Value": "${EnvironmentName} Public Subnet (AZ5)" } ] }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": "VPC",
        "Tags": [ { "Key": "Name", "Value": "${EnvironmentName} Public Routes" } ] }
    },
    "DefaultPublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "RouteTableId": "PublicRouteTable",
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": "InternetGateway"
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": "PublicRouteTable",
        "SubnetId": "PublicSubnet1"
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": "PublicRouteTable",
        "SubnetId": "PublicSubnet2"
      }
    },
    "PublicSubnet3RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": "PublicRouteTable",
        "SubnetId": "PublicSubnet3"
      }
    },
    "PublicSubnet4RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": "PublicRouteTable",
        "SubnetId": "PublicSubnet4"
      }
    },
    "PublicSubnet5RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": "PublicRouteTable",
        "SubnetId": "PublicSubnet5"
      }
    },
    "PublicSubnet6RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": "PublicRouteTable",
        "SubnetId": "PublicSubnet6"
      }
    },
    "NoIngressSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "no-ingress-sg",
        "GroupDescription": "Security group with no ingress rule",
        "VpcId": "VPC"
      }
    },
    "AllTrafficSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "AllTrafficSg01",
        "GroupDescription": "SG libera todo trafego",
        "SecurityGroupIngress": [
          {
            "Description": "All traffic inbound ip4 allowed",
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "Description": "All traffic inbound ip6 allowed",
            "IpProtocol": "-1",
            "CidrIpv6": "::/0",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ],
        "VpcId": "VPC"
      }
    },
    "TemplateDockerAwsLinux2AllTrafic": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "ImageId": {
            "Fn::FindInMap": [
              "AmiMap",
              "ServerType01",
              "id"
            ]
          },
          "InstanceType": {
            "Ref": "InstanceTypeParam"
          },
          "KeyName": {
            "Fn::FindInMap": [
              "KeyPair",
              "Key01",
              "key"
            ]
          },
          "SecurityGroupIds": [
            {
              "Ref": "AllTrafficSecurityGroup"
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                {
                  "Fn::FindInMap": [
                    "UserData",
                    "Script01",
                    "ScriptList"
                  ]
                }
              ]
            }
          }
        },
        "LaunchTemplateName": "templ-docker-aws-linux2-all-trafic"
      }
    },
    "instanciadocker01": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "docker01"
          }
        ],
        "AvailabilityZone": [
          0,
          null
        ],
        "NetworkInterfaces": [
          {
            "Description": "Primary Network Interface",
            "DeviceIndex": "0",
            "SubnetId": "PublicSubnet1",
            "PrivateIpAddress": "IpHostSubnet1",
            "GroupSet": [
              {
                "Ref": "AllTrafficSecurityGroup"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AmiMap",
            "ServerType01",
            "id"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceTypeParam"
        },
        "KeyName": "KeyNameParam",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              {
                "Fn::FindInMap": [
                  "UserData",
                  "Script01",
                  "ScriptList"
                ]
              }
            ]
          }
        }
      }
    },
    "instanciadocker02": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "docker02"
          }
        ],
        "AvailabilityZone": [
          1,
          null
        ],
        "NetworkInterfaces": [
          {
            "Description": "Primary Network Interface",
            "DeviceIndex": "0",
            "SubnetId": "PublicSubnet2",
            "PrivateIpAddress": "IpHostSubnet2",
            "GroupSet": [
              {
                "Ref": "AllTrafficSecurityGroup"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AmiMap",
            "ServerType01",
            "id"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceTypeParam"
        },
        "KeyName": "KeyNameParam",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              {
                "Fn::FindInMap": [
                  "UserData",
                  "Script01",
                  "ScriptList"
                ]
              }
            ]
          }
        }
      }
    },
    "instanciadocker03": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "docker03"
          }
        ],
        "AvailabilityZone": [
          2,
          null
        ],
        "NetworkInterfaces": [
          {
            "Description": "Primary Network Interface",
            "DeviceIndex": "0",
            "SubnetId": "PublicSubnet3",
            "PrivateIpAddress": "IpHostSubnet3",
            "GroupSet": [
              {
                "Ref": "AllTrafficSecurityGroup"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AmiMap",
            "ServerType01",
            "id"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceTypeParam"
        },
        "KeyName": "KeyNameParam",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              {
                "Fn::FindInMap": [
                  "UserData",
                  "Script01",
                  "ScriptList"
                ]
              }
            ]
          }
        }
      }
    },
    "instanciadocker04": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "docker04"
          }
        ],
        "AvailabilityZone": [
          3,
          null
        ],
        "NetworkInterfaces": [
          {
            "Description": "Primary Network Interface",
            "DeviceIndex": "0",
            "SubnetId": "PublicSubnet4",
            "PrivateIpAddress": "IpHostSubnet4",
            "GroupSet": [
              {
                "Ref": "AllTrafficSecurityGroup"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AmiMap",
            "ServerType01",
            "id"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceTypeParam"
        },
        "KeyName": "KeyNameParam",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              {
                "Fn::FindInMap": [
                  "UserData",
                  "Script01",
                  "ScriptList"
                ]
              }
            ]
          }
        }
      }
    },
    "instanciadocker05": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "docker05"
          }
        ],
        "AvailabilityZone": [
          4,
          null
        ],
        "NetworkInterfaces": [
          {
            "Description": "Primary Network Interface",
            "DeviceIndex": "0",
            "SubnetId": "PublicSubnet5",
            "PrivateIpAddress": "IpHostSubnet5",
            "GroupSet": [
              {
                "Ref": "AllTrafficSecurityGroup"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AmiMap",
            "ServerType01",
            "id"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceTypeParam"
        },
        "KeyName": "KeyNameParam",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              {
                "Fn::FindInMap": [
                  "UserData",
                  "Script01",
                  "ScriptList"
                ]
              }
            ]
          }
        }
      }
    },
    "instanciadocker06": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "docker06"
          }
        ],
        "AvailabilityZone": [
          5,
          null
        ],
        "NetworkInterfaces": [
          {
            "Description": "Primary Network Interface",
            "DeviceIndex": "0",
            "SubnetId": "PublicSubnet6",
            "PrivateIpAddress": "IpHostSubnet6",
            "GroupSet": [
              {
                "Ref": "AllTrafficSecurityGroup"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AmiMap",
            "ServerType01",
            "id"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceTypeParam"
        },
        "KeyName": "KeyNameParam",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              {
                "Fn::FindInMap": [
                  "UserData",
                  "Script01",
                  "ScriptList"
                ]
              }
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "VPC": {
      "Description": "A reference to the created VPC",
      "Value": "VPC"
    },
    "PublicSubnets": {
      "Description": "A list of the public subnets",
      "Value": [
        ",",
        [
          "PublicSubnet1",
          "PublicSubnet2",
          "PublicSubnet3",
          "PublicSubnet4"
        ]
      ]
    },
    "PublicSubnet1": {
      "Description": "A reference to the public subnet in the 1st Availability Zone",
      "Value": "PublicSubnet1"
    },
    "PublicSubnet2": {
      "Description": "A reference to the public subnet in the 2nd Availability Zone",
      "Value": "PublicSubnet2"
    },
    "PublicSubnet3": {
      "Description": "A reference to the public subnet in the 3rd Availability Zone",
      "Value": "PublicSubnet3"
    },
    "PublicSubnet4": {
      "Description": "A reference to the public subnet in the 4th Availability Zone",
      "Value": "PublicSubnet4"
    },
    "PublicSubnet5": {
      "Description": "A reference to the public subnet in the 3rd Availability Zone",
      "Value": "PublicSubnet5"
    },
    "PublicSubnet6": {
      "Description": "A reference to the public subnet in the 4th Availability Zone",
      "Value": "PublicSubnet6"
    },
    "NoIngressSecurityGroup": {
      "Description": "Security group with no ingress rule",
      "Value": "NoIngressSecurityGroup"
    }
  }
}